this file is being imported from another module, __name__ will be set to the module’s name.
__name__ is a built-in variable which evaluates to the name of the current module. 
Thus it can be used to check whether the current script is being run on its own or being imported somewhere else by combining it with if statement, 
as shown below.

Consider two separate files File1 and File2:
file1.py
==============================================================================
# File1.py

print ("File1 __name__ = %s" %__name__)

if __name__ == "__main__":
	print ("File1 is being run directly")
else:
	print ("File1 is being imported")

==============================================================================
file2.py
==============================================================================
# File2.py

import File1

print ("File2 __name__ = %s" %__name__)

if __name__ == "__main__":
	print ("File2 is being run directly")
else:
	print ("File2 is being imported")

===============================================================================

output:
================================================================
Now the interpreter is given the command to run File1.py.
python File1.py
Output :
File1 __name__ = __main__
File1 is being run directly


And then File2.py is run.
python File2.py
Output :
File1 __name__ = File1
File1 is being imported
File2 __name__ = __main__
File2 is being run directly

================================================================

des:
As seen above, when File1.py is run directly, 
the interpreter sets the __name__ variable as __main__ and when it is run through File2.py by importing, 
the __name__ variable is set as the name of the python script, i.e. File1. Thus,
it can be said that if __name__ == “__main__” is the part of the program that runs when the script is run from the command line using a command like python File1.py.

